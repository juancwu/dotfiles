# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support for ls and grep (even tho i don't use grep ???)
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
fi

export PATH=$PATH:/home/jc/.local/bin

# --------------  Aliases
alias gs="git status"

# ll alias breakdown
# -a includes hidden files
# -l displays the listing in long format, showing file attributes such as permissions
# -F appends a character to each entry in the listing to indicate the file type (e.g '/' for directories and '*' for executables)
alias ll="ls -alF"

# la alias breakdown
# -A list all entries without ./ and ../
alias la="ls -A"

# l alias breakdown
# -C list entries by columns
# -F appends a character to each entry in the listing to indicate the file type (e.g '/' for directories and '*' for executables)
alias l="ls -CF"

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=normal -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# add alias for clear, makes it easier
alias cc="clear"

# always select the clipboard
alias xc="xclip -selection clipboard"

# Nice line headers for logs
ERROR=$'\033[39;41mERROR:\033[0m'
SUCCESS=$'\033[39;42mSUCCESS:\033[0m'
WARNING=$'\033[39;43mWARNING:\033[0m'
INFO=$'\033[39;44mINFO:\033[0m'

# --------------  Functions
# list directory and cd into it
sd() {
	local path=${1:-.}
	local result=$(ls -d ${path}/*/ 2> /dev/null | fzf)
	if [[ -n "${result}" ]]; then
		cd "${result}"
	else
		echo -e "$ERROR No directories found or no selection made."
	fi
}

# list files and opens it in neovim
sf() {
	local path=${2:-.}
  if [[ $1 == "-h" ]]; then
    local result=$(find ${path} -type f -name '.*' 2> /dev/null | fzf)
  else
    local result=$(find ${path} -type f 2> /dev/null | fzf)
  fi
	if [[ -n "${result}" ]]; then
		nvim "${result}"
	else
		echo -e "$ERROR No files found or no selecteion made."
	fi
}

# fuzzy cd into specific folders 
fcd() {
    local selected_dir=""

    if [ $# -eq 1 ]; then
        selected_dir=$({
            find "$HOME/.config" -maxdepth 1 -type d
            find "$HOME/.config" -maxdepth 1 -type l
            find "$HOME/.cache" -maxdepth 1 -type d
            find "/mnt/smb" -maxdepth 1 -type d
            echo "$HOME/Documents/Obsidian Vault"
            find "$HOME/ghq" -mindepth 2 -maxdepth 2 -type d
            ls -d -1 "$HOME/"/*/ | grep -v \.git
        } | fzf --filter="$1" --select-1 --exit-0 | head -1)
    else
        selected_dir=$({
            find "$HOME/.config" -maxdepth 1 -type d
            find "$HOME/.config" -maxdepth 1 -type l
            find "$HOME/.cache" -maxdepth 1 -type d
            find "/mnt/smb" -maxdepth 1 -type d
            echo "$HOME/Documents/Obsidian Vault"
            find "$HOME/ghq" -mindepth 2 -maxdepth 2 -type d
            ls -d -1 "$HOME/"/*/ | grep -v \.git
        } | fzf)
    fi

	if [ -n "$selected_dir" ]; then
		cd "$selected_dir"
		if [[ -f .nvmrc ]]; then
			NVMRC_VERSION=$(cat .nvmrc)
			CURRENT_VERSION=$(nvm current)
			if [ "$NVMRC_VERSIOn" != "$CURRENT_VERSION" ]; then
				nvm use
			fi
		fi
	else
		echo -e "$ERROR No selection made."
	fi
}

# fuzzy find all directories from cwd
# or quickly select best match from query
cdf() {
    local selected_dir=""

    if [ $# -eq 1 ]; then
        selected_dir=$(find . -type d | fzf --filter="$1" --select-1 --exit-0 | head -1)
    else
        selected_dir=$(find . -type d | fzf)
    fi

    if [ -n "$selected_dir" ]; then
        cd "$selected_dir"
    fi
}

# clone repository
cl() {
    if [[ $# -eq 0 ]]; then
        # help text
        echo "Usage: cl REPOSITORY_NAME"
        echo "Usage: cl REPOSITORY_URL"
        echo "Usage: cl (hub|lab) REPOSITORY_NAME"
        echo "Usage: cl (hub|lab) NAMESPACE REPOSITORY_NAME"
    fi

    local url=$1
    local ghq_dir="$HOME/ghq"
    local namespace=""
    local repository_name=""

    # extract project name
    if [[ $url =~ git@git(lab|hub)\.com:([^/]+)/([^/]+)\.git ]]; then
        local namespace="${BASH_REMATCH[2]}"
        local repository_name="${BASH_REMATCH[3]}"
    elif [[ $url =~ https://git(lab|hub)\.com/([^/]+)/([^/]+)\.git ]]; then
        local namespace="${BASH_REMATCH[2]}"
        local repository_name="${BASH_REMATCH[3]}"
    elif [[ $# -ne 0 ]]; then
        repository_name=$1
        namespace="juancwu"
        # default domain to github
        local domain="hub"
        # possible domain given
        if [[ $# -eq 2 ]]; then
            domain=$1
            repository_name=$2
        fi
        if [[ $# -eq 3 ]]; then
            # it has been given a domain, namespace and repository name
            domain=$1
            namespace=$2
            repository_name=$3
        fi
        url="git@git$domain.com:$namespace/$repository_name.git"
    else
        echo -e "$ERROR Invalid URL format"
        return 1
    fi

    # check if directory for project exists or not
    local repository_dir="${ghq_dir}/${namespace}/${repository_name}"
    if [[ ! -d $repository_dir ]]; then
        mkdir -p $repository_dir
    fi

    git clone $url $repository_dir
}

# get branch if available
parse-git-branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# delete local branches that don't exists in remote repository
git-prune() {
    git fetch --prune
    git branch -vv | grep '\[origin/.*: gone\]' | awk '{print $1}' | xargs git branch -d
}

# fuzzy find branches and switch to selected branch
gc() {
    if [ $# -eq 1 ]; then
        local selected_branch=$(git branch | fzf --filter="$1" --select-1 --exit-0 | head -1 | sed 's/^[ \*]*//')
        git checkout "$selected_branch"
        return
    fi

    local selected_branch=$(git branch | fzf | sed 's/^[ \*]*//')

    if [ -n "$selected_branch" ]; then
        git checkout "$selected_branch"
    else
        echo "No branch selected"
    fi
}

# fuzzy find remote branches and switch to selected branch
gcr() {
    git fetch

    if [ $# -eq 1 ]; then
        local selected_branch=$(git branch -r | fzf --filter="$1" --select-1 --exit-0 | head -1 | sed -E 's/^([ \*]*origin\/[\ *]*)*//')
        git checkout "$selected_branch"
        return
    fi
    
    local selected_branch=$(git branch -r | fzf | sed -E 's/^([ \*]*origin\/[\ *]*)*//')

    if [ -n "$selected_branch" ]; then
        git checkout "$selected_branch"
    else
        echo "No branch selected"
    fi
}

# makes it easier to spin up ngrok with static domain, pass in the port ngrok needs to listen
sngrok() {
    ngrok http --domain=hyena-merry-literally.ngrok-free.app $1
}

# Set prompt
if [ "$color_prompt" = yes ]; then
    PS1="${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[01;31m\]\$(parse-git-branch)\[\033[00m\] \$ "
else
    PS1="${debian_chroot:+($debian_chroot)}\u@\h:\w\$(parse-git-branch)\$ "
fi
unset color_prompt

# setup terminal stuff
# determine initial terminal color mode
TERM_COLOR_MODE=dark
command -v asadesuka > /dev/null 2>&1
if [ $? -eq 0 ]; then
    IS_ASA=$(asadesuka -offset=30)
    if [ $IS_ASA == "true" ]; then
        TERM_COLOR_MODE=light
    fi
else
    CURRENT_HOUR=$(date +"%H")
    SEVEN_AM=7
    SEVEN_PM=19
    if [ $CURRENT_HOUR -ge $SEVEN_AM ] && [ $CURRENT_HOUR -lt $SEVEN_PM ]; then
        TERM_COLOR_MODE=light
    fi
fi
export TERM_COLOR_MODE

# set the terminal color theme
USE_TERM=alacritty
theme_link="$HOME/.config/alacritty/theme.toml"
use_theme="$HOME/ghq/alacritty/alacritty-theme/themes/catppuccin_latte.toml"
if [ $TERM_COLOR_MODE == "dark" ]; then
    # if [ $USE_TERM == "kitty" ]; then
    #     kitten @ set-colors --all "$HOME/.config/kitty/light.conf"
    # fi
    # if [ $USE_TERM == "alacritty" ]; then
    #     cp "$HOME/ghq/alacritty/alacritty-theme/themes/catppuccin_latte.toml" "$theme_link"
    # fi
    use_theme="$HOME/ghq/alacritty/alacritty-theme/themes/catppuccin_mocha.toml"
# else
#     if [ $USE_TERM == "kitty" ]; then
#         kitten @ set-colors --all "$HOME/.config/kitty/dark.conf"
#     fi
#     if [ $USE_TERM == "alacritty" ]; then
#         cp "$HOME/ghq/alacritty/alacritty-theme/themes/catppuccin_mocha.toml" "$theme_link"
#     fi
fi
rm -f "$theme_link"
cp "$use_theme" "$theme_link"

# setup kitty, it will export TERM_COLOR_MODE (can be light or dark)
# source ~/.config/kitty/setup.sh
# function to toggle kitty terminal theme
toggle_theme() {
    if [ "$TERM_COLOR_MODE" == "light" ]; then
        export TERM_COLOR_MODE=dark
        theme="catppuccin_latte"
    else
        export TERM_COLOR_MODE=light
        theme="catppuccin_mocha"
    fi
    if [ $USE_TERM == "kitty" ]; then
        kitten @ set-colors --all "$HOME/.config/kitty/$TERM_COLOR_MODE.conf"
    fi
    if [ $USE_TERM == "alacritty" ]; then
        theme_link="$HOME/.config/alacritty/theme.toml"
        if [ -L "$theme_link" ]; then
            rm "$theme_link"
        fi
        ln -s "$HOME/ghq/alacritty/alacritty-theme/themes/$theme.toml" "$theme_link"
    fi
}

type -p curl >/dev/null || echo -e "$WARNING curl is not installed"

command -v nvm > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo -e "$WARNING nvm is not installed"
fi

command -v pnpm > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo -e "$WARNING pnpm is not installed"
fi

command -v nvim > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo -e "$ERROR neovim is not installed"
fi

# command -v yarn > /dev/null 2>&1
# if [ $? -ne 0 ]; then
#     echo -e "$WARNING yarn is not installed"
# fi

# command -v bun > /dev/null 2>&1
# if [ $? -ne 0 ]; then
#     echo -e "$WARNING bun is not installed"
# fi

# command -v notify-send > /dev/null 2>&1
# if [ $? -ne 0 ]; then
#     echo -e "$WARNING notify-send is not installed. Will affect the alias: \033[34;49;1malert\033[0m"
# fi

command -v lazygit > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo -e "$WARNING lazygit is not installed"
else
    alias lg="lazygit"
fi

command -v rustc > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo -e "$WARNING rust is not installed"
fi

# set bat theme
export BAT_THEME="ansi"

# walk editor
export EDITOR=nvim

bc() {
    mac=$(bluetoothctl devices | rg "$1" | awk '{print $2}')
    bluetoothctl connect $mac
}

# helper function to fuzzy search files in the current working directory
ed() {
    local f=""

    if [ $# -eq 1 ]; then
        f=$(find . | grep -Ev "node_modules|\.git/" | fzf --filter="$1" --select-1 --exit-0 | head -1)
    else
        f=$(find . | grep -Ev "node_modules|\.git/" | fzf)
    fi

    if [ -n "$f" ]; then
        nvim "$f"
    fi
}

export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH:$GOPATH/bin
export EDITOR=nvim
